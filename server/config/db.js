
var Sequelize = require('sequelize');
//initialize Sequelize with postgres with remote url
if (process.env.DATABASE_URL) {
  var db = new Sequelize(process.env.DATABASE_URL, {dialect: 'postgres', logging: false });
} else {
  // otherwise initialize Sequelize with postgres on your local machine
  var db = new Sequelize('stackets', process.env.POSTGRES_USER, '', {dialect: 'postgres', logging: false });
}

//create Snippet table
var Snippet = db.define('Snippet', {
  title: Sequelize.STRING,
  snippet: Sequelize.TEXT,
  notes: Sequelize.TEXT
  //id (auto-generated)
  //createdAt (auto-generated)
  //updatedAt (auto-generated)
  //LanguageId (generated by join)
});

//create Language table
var Language = db.define('Language', {
  name: Sequelize.TEXT,
  displayname: Sequelize.TEXT
  //id (auto-generated)
  //createdAt (auto-generated)
  //updatedAt (auto-generated)
});

//create Tag table
var Tag = db.define('Tag', {
  tag: Sequelize.TEXT
  //id (auto-generated)
  //createdAt (auto-generated)
  //updatedAt (auto-generated)
});

//create SnippetTag table
var SnippetTag = db.define('SnippetTag');
//TagId (generated by join)
//SnippetId (generated by join)
//createdAt (auto-generated)
//updatedAt (auto-generated)

var ResourceUrl = db.define('ResourceUrl', {
  url: Sequelize.TEXT,
  //SnippetId (generated by join)
  //id (auto-generated)
  //createdAt (auto-generated)
  //updatedAt (auto-generated)
});

// create User table
var User = db.define('User', {
  name: Sequelize.TEXT
  //id (auto-generated)
  //createdAt (auto-generated)
  //updatedAt (auto-generated)
});

//create Favorite table that contains userID and snippetID per favorite
var Favorite = db.define('Favorite');
//TagId (generated by join)
//SnippetId (generated by join)
//createdAt (auto-generated)
//updatedAt (auto-generated)

//sync individual tables listed above and create join tables
Snippet.sync()
.then(() => Snippet.belongsTo(Language, {foreignkey: 'LanguageId'}))
.then(() => Language.hasMany(Snippet, {foreignkey: 'LanguageId'}))
.then(() => Language.sync())
.then(() => Tag.belongsToMany(Snippet, {through: SnippetTag }))
.then(() => Snippet.belongsToMany(Tag, {through: SnippetTag }))
.then(() => User.belongsToMany(Snippet, {through: Favorite }))
.then(() => Snippet.belongsToMany(User, {through: Favorite }))
.then(() => Snippet.hasMany(ResourceUrl, {foreignkey: 'SnippetId'}))
.then(() => ResourceUrl.belongsTo(Snippet, {foreignkey: 'SnippetId'}))
.then(() => Tag.sync())
.then(() => Snippet.sync())
.then(() => SnippetTag.sync())
.then(() => Favorite.sync())
.then(() => ResourceUrl.sync());

//export table schemas for use in other files
module.exports = {
  Snippet: Snippet,
  Language: Language,
  Tag: Tag,
  SnippetTag: SnippetTag,
  ResourceUrl: ResourceUrl,
  User: User,
  Favorite: Favorite
};
